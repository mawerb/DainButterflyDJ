import { DainPlugin } from './types';
/**
 * Base class for implementing DAIN plugins
 * Provides default implementations of required methods
 */
export declare abstract class BaseDainPlugin<TConfig = any, TInput = any, TOutput = any> implements DainPlugin<TConfig, TInput, TOutput> {
    abstract id: string;
    abstract name: string;
    abstract version: string;
    abstract description: string;
    abstract type: 'service' | 'client' | 'both';
    abstract config: TConfig;
    /**
     * Get plugin data from a tool context
     * This simplifies accessing plugin data in a tool handler
     */
    getInputData(context: any): TInput | undefined;
    /**
     * Create a standardized response for this plugin
     * This helps format plugin data consistently in tool responses
     */
    createResponse(data: Partial<TOutput>): TOutput;
    /**
     * Get processed plugin data from a tool response
     */
    getResponseData(response: any): TOutput | undefined;
    /**
     * Process input data before sending to service
     * This is called on the client side before making a tool call
     */
    processInputClient(input: any): Promise<TInput>;
    /**
     * Process output data when receiving a tool response
     * This is called on the client side after receiving a tool response
     */
    processOutputClient(output: any): Promise<any>;
    /**
     * Process input data when receiving a tool call
     * This is called on the service side before processing a tool request
     */
    processInputService(input: any): Promise<any>;
    /**
     * Process output data when sending a tool response
     * This is called on the service side after processing a tool response
     */
    processOutputService(output: any): Promise<TOutput>;
}
