/**
 * Interface for DAIN Service plugins
 * Plugins can intercept and modify tool requests/responses
 */
export interface DainPlugin<TConfig = any, TInput = any, TOutput = any> {
    /** Unique identifier for the plugin */
    id: string;
    /** Human-readable name */
    name: string;
    /** Version string */
    version: string;
    /** Description of what the plugin does */
    description: string;
    /** Where the plugin runs - client, service, or both */
    type: 'service' | 'client' | 'both';
    /** Plugin configuration */
    config: TConfig;
    /**
     * Process input data before sending to service
     * This is called on the client side before making a tool call
     */
    processInputClient?(input: any): Promise<TInput>;
    /**
     * Process output data after receiving from service
     * This is called on the client side after receiving a tool response
     */
    processOutputClient?(output: any): Promise<any>;
    /**
     * Process input data before sending to service
     * This is called on the service side before processing a tool request
     */
    processInputService?(input: any): Promise<any>;
    /**
     * Process output data after receiving from service
     * This is called on the service side after processing a tool response
     */
    processOutputService?(output: any): Promise<TOutput>;
    /**
     * Get input data from context
     */
    getInputData?(context: any): TInput | undefined;
    /**
     * Get response data from response
     */
    getResponseData?(response: any): TOutput | undefined;
    /**
     * Create a response from partial data
     */
    createResponse?(data: Partial<TOutput>): TOutput;
}
/**
 * Standard interface for plugin data in requests and responses
 */
export interface PluginData {
    [pluginId: string]: any;
}
