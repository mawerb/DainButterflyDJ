import { DSLBuilder } from "../../../base/base.builder";
import { DslAction, DslActionWithConfig, paramSchema } from "../../../types";
export type ButtonVariant = "primary" | "secondary" | "destructive" | "cancel" | "outline";
export interface CardField {
    label: string;
    value: string;
    type?: "link" | "button";
    link?: string;
}
export interface CardProps {
    title: string;
    content?: string;
    variant?: "default" | "destructive" | "outline";
    buttonText?: string;
    buttonUrl?: string;
    fields?: CardField[];
    actionAlignment?: "row" | "column";
}
export type CardActionConfig = {
    label: string;
    type: "button" | "link";
    variant?: ButtonVariant;
    href?: string;
};
export type CardAction = DslActionWithConfig<CardActionConfig>;
export interface ButtonParams {
    label: string;
    tool: string;
    paramSchema: paramSchema;
    params: Record<string, unknown>;
    variant?: ButtonVariant;
}
export declare class CardUIBuilder extends DSLBuilder<CardProps> {
    constructor(initialProps?: Partial<CardProps>, renderMode?: "inline" | "page");
    title(title: string): this;
    content(content: string): this;
    alignActions(direction: "row" | "column"): this;
    onConfirm(action: Partial<DslAction>): this;
    addButton(params: ButtonParams): this;
    addButtons(buttons: ButtonParams[]): this;
    addButtons<T>(items: T[], mapper: (item: T) => ButtonParams): this;
    addField(field: CardField): this;
    /**
 * Overload for addFields so you can pass either an array of CardField
 * or an array of custom items with a mapper function.
 */
    addFields(fields: CardField[]): this;
    addFields<T>(items: T[], mapper: (item: T) => CardField): this;
}
