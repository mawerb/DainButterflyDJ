"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableUIBuilder = void 0;
const base_builder_1 = require("../../../base/base.builder");
/**
 * A flexible builder for creating tabular UI elements.
 */
class TableUIBuilder extends base_builder_1.DSLBuilder {
    constructor(initialProps, renderMode = "inline") {
        super("table", initialProps, renderMode);
    }
    // ---------------------------
    // COLUMN MANIPULATION
    // ---------------------------
    setColumns(columns) {
        return this.setProp("columns", columns);
    }
    /**
     * Add a single column to the table.
     *
     * - If type == "component", pass a DSLBuilder or BaseUIElement in `component`.
     * - Otherwise, row data is rendered as plain text/number/date, etc.
     */
    addColumn(column) {
        var _a;
        if (!this.element.props.columns) {
            this.element.props.columns = [];
        }
        const finalCol = Object.assign({ flex: (_a = column.flex) !== null && _a !== void 0 ? _a : 1, alignment: column.alignment }, column);
        if (finalCol.component && finalCol.component instanceof base_builder_1.DSLBuilder) {
            finalCol.component = finalCol.component.build();
        }
        this.element.props.columns.push(finalCol);
        return this;
    }
    addColumns(columnsOrItems, mapper) {
        if (!this.element.props.columns) {
            this.element.props.columns = [];
        }
        if (mapper) {
            columnsOrItems.forEach((item) => {
                const col = mapper(item);
                this.addColumn(col);
            });
        }
        else {
            columnsOrItems.forEach((col) => {
                this.addColumn(col);
            });
        }
        return this;
    }
    /**
     * Dynamically update props for any existing column by `key`.
     */
    setColumnProps(columnKey, props) {
        if (!this.element.props.columns)
            return this;
        const finalProps = Object.assign({}, props);
        if (finalProps.component && finalProps.component instanceof base_builder_1.DSLBuilder) {
            finalProps.component = finalProps.component.build();
        }
        this.element.props.columns = this.element.props.columns.map((col) => col.key === columnKey ? Object.assign(Object.assign({}, col), finalProps) : col);
        return this;
    }
    setColumnAlignment(columnKey, alignment) {
        return this.setColumnProps(columnKey, { alignment });
    }
    // ---------------------------
    // ROWS & DATA
    // ---------------------------
    rows(rows) {
        return this.setProp("rows", rows);
    }
    // ---------------------------
    // VISUAL / LAYOUT CONFIG
    // ---------------------------
    useStripedRows(striped = true) {
        return this.setProp("striped", striped);
    }
    highlightRowsOnHover(highlight = true) {
        return this.setProp("highlightOnHover", highlight);
    }
    showBorders(enable = true) {
        return this.setProp("borders", enable);
    }
    setHorizontalBorders(enable = true) {
        return this.setProp("horizontalBorders", enable);
    }
    setVerticalBorders(enable = true) {
        return this.setProp("verticalBorders", enable);
    }
    setBorderStyle(style) {
        return this.setProp("borderStyle", style);
    }
    setBorderColor(color) {
        return this.setProp("borderColor", color);
    }
    setBorderWidth(width) {
        return this.setProp("borderWidth", width);
    }
    setTableLayout(layout) {
        return this.setProp("tableLayout", layout);
    }
    setMaxHeight(value) {
        return this.setProp("maxHeight", value);
    }
    setMaxWidth(value) {
        return this.setProp("maxWidth", value);
    }
    // ---------------------------
    // HEADER STYLES
    // ---------------------------
    setHeaderStyle(style) {
        return this.setProp("headerStyle", style);
    }
    setHeaderSize(size) {
        return this.setProp("headerSize", size);
    }
    setHeaderDivider(show = true) {
        return this.setProp("headerDivider", show);
    }
    setHeaderFixed(fixed = true) {
        return this.setProp("headerFixed", fixed);
    }
    setHeaderEmphasis(emphasis) {
        return this.setProp("headerEmphasis", emphasis);
    }
    setHeaderPadding(padding) {
        return this.setProp("headerPadding", padding);
    }
    setHeaderPaddingTop(padding) {
        return this.setProp("headerPaddingTop", padding);
    }
    setHeaderPaddingRight(padding) {
        return this.setProp("headerPaddingRight", padding);
    }
    setHeaderPaddingBottom(padding) {
        return this.setProp("headerPaddingBottom", padding);
    }
    setHeaderPaddingLeft(padding) {
        return this.setProp("headerPaddingLeft", padding);
    }
    // ---------------------------
    // SORTING & FILTERING
    // ---------------------------
    setSortable(sortable = true) {
        return this.setProp("sortable", sortable);
    }
    setDefaultSort(column, direction) {
        this.setProp("defaultSortColumn", column);
        return this.setProp("defaultSortDirection", direction);
    }
    setFilterable(filterable = true) {
        return this.setProp("filterable", filterable);
    }
    setSearchable(searchable = true, placeholder) {
        this.setProp("searchable", searchable);
        if (placeholder) {
            this.setProp("searchPlaceholder", placeholder);
        }
        return this;
    }
    // ---------------------------
    // PAGINATION
    // ---------------------------
    setPagination(enable = true, pageSize = 10) {
        this.setProp("paginated", enable);
        return this.setProp("pageSize", pageSize);
    }
    setPageSizeOptions(options) {
        return this.setProp("pageSizeOptions", options);
    }
    // ---------------------------
    // SELECTION
    // ---------------------------
    setSelectable(selectable = true, multiSelect = false) {
        this.setProp("selectable", selectable);
        return this.setProp("multiSelect", multiSelect);
    }
    // ---------------------------
    // RESPONSIVE
    // ---------------------------
    setStickyHeader(sticky = true) {
        return this.setProp("stickyHeader", sticky);
    }
    setStickyFirstColumn(sticky = true) {
        return this.setProp("stickyFirstColumn", sticky);
    }
    setHorizontalScroll(scroll = true) {
        return this.setProp("horizontalScroll", scroll);
    }
    // ---------------------------
    // ACTIONS
    // ---------------------------
    setActionsDisplay(display) {
        return this.setProp("actionsDisplay", display);
    }
    addRowAction(params) {
        const { hint, tool, type = "callTool", prompt, variant = "default", href, icon } = params;
        this.addAction({
            hint,
            type,
            tool,
            prompt,
            key: "row-action",
            config: {
                hint,
                variant,
                href,
                icon,
            },
        });
        return this;
    }
    /**
     * Define an action to be triggered when a row is clicked.
     * The front-end should pass the clicked row's data (and possibly index) to the tool call.
     */
    onRowClick(action) {
        const { tool, paramSchema, params } = action;
        if (!tool || !paramSchema || !params) {
            throw new Error("onRowClick action must define a tool, paramSchema, and params.");
        }
        return this.addAction({
            type: "callTool",
            tool,
            paramSchema,
            params,
            key: "rowClick",
        });
    }
}
exports.TableUIBuilder = TableUIBuilder;
//# sourceMappingURL=table.builder.js.map