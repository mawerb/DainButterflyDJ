import { DSLBuilder } from "../../../base/base.builder";
import { BaseUIElement, DslAction, DslActionWithConfig } from "../../../types";
export type TableActionConfig = {
    hint: string;
    variant?: "default" | "destructive" | "outline";
    href?: string;
    icon?: string;
};
export type TableAction = DslActionWithConfig<TableActionConfig>;
export interface TableColumn {
    /** Unique key used to map row data to this column. */
    key: string;
    /** Visible header text. */
    header: string;
    /** The data type: "text", "number", "date", "component", etc. */
    type: "text" | "string" | "number" | "date" | "component" | "image" | "currency" | "link";
    /** Optional UI component if type == "component". */
    component?: DSLBuilder<any> | BaseUIElement<any>;
    /** Text alignment for this column. */
    alignment?: "left" | "center" | "right";
    /** Flex-grow ratio if the UI is rendered with flexible columns. */
    flex?: number;
    /** Whether to hide this column on mobile devices */
    hideOnMobile?: boolean;
    /** Whether this column can be sorted */
    sortable?: boolean;
    /** Whether this column can be filtered */
    filterable?: boolean;
    /** Width of the column (e.g. "200px", "20%") */
    width?: string;
    /** Minimum width of the column */
    minWidth?: string;
    /** Maximum width of the column */
    maxWidth?: string;
    /** Whether to wrap text in this column */
    wrap?: boolean;
    /** Custom tooltip text for the column header */
    tooltip?: string;
}
/**
 * The main props needed to configure the table.
 */
export interface TableProps {
    columns?: TableColumn[];
    rows?: Array<Record<string, unknown>>;
    striped?: boolean;
    highlightOnHover?: boolean;
    borders?: boolean;
    horizontalBorders?: boolean;
    verticalBorders?: boolean;
    borderStyle?: "solid" | "dashed" | "dotted" | "none";
    borderColor?: string;
    borderWidth?: string;
    tableLayout?: "auto" | "fixed";
    maxHeight?: string;
    maxWidth?: string;
    minWidth?: string;
    width?: string;
    height?: string;
    padding?: string;
    cellPadding?: string;
    cellPaddingTop?: string;
    cellPaddingRight?: string;
    cellPaddingBottom?: string;
    cellPaddingLeft?: string;
    headerStyle?: "default" | "bold" | "subtle" | "emphasized";
    headerSize?: "small" | "medium" | "large";
    headerDivider?: boolean;
    headerFixed?: boolean;
    /** Controls visual prominence of header row - affects background, contrast and weight */
    headerEmphasis?: "none" | "low" | "medium" | "high";
    headerPadding?: string;
    headerPaddingTop?: string;
    headerPaddingRight?: string;
    headerPaddingBottom?: string;
    headerPaddingLeft?: string;
    headerBackground?: string;
    headerTextColor?: string;
    sortable?: boolean;
    defaultSortColumn?: string;
    defaultSortDirection?: "asc" | "desc";
    filterable?: boolean;
    searchable?: boolean;
    searchPlaceholder?: string;
    paginated?: boolean;
    pageSize?: number;
    pageSizeOptions?: number[];
    showPageSizeSelector?: boolean;
    loading?: boolean;
    loadingText?: string;
    emptyText?: string;
    emptyIcon?: string;
    selectable?: boolean;
    multiSelect?: boolean;
    selectedRows?: number[];
    responsiveBreakpoint?: string;
    stickyHeader?: boolean;
    stickyFirstColumn?: boolean;
    horizontalScroll?: boolean;
    caption?: string;
    summary?: string;
    ariaLabel?: string;
    showHeader?: boolean;
    actionsDisplay?: "column" | "hover";
}
/**
 * A flexible builder for creating tabular UI elements.
 */
export declare class TableUIBuilder extends DSLBuilder<TableProps> {
    constructor(initialProps?: Partial<TableProps>, renderMode?: "inline" | "page");
    setColumns(columns: TableColumn[]): this;
    /**
     * Add a single column to the table.
     *
     * - If type == "component", pass a DSLBuilder or BaseUIElement in `component`.
     * - Otherwise, row data is rendered as plain text/number/date, etc.
     */
    addColumn(column: Omit<TableColumn, "flex" | "alignment"> & {
        flex?: number;
        alignment?: "left" | "center" | "right";
    }): this;
    /**
     * Overloaded method for adding multiple columns.
     * Allows either an array of TableColumn-like objects
     * or an array of items with a mapping function.
     */
    addColumns(columns: Array<Omit<TableColumn, "flex" | "alignment"> & {
        flex?: number;
        alignment?: "left" | "center" | "right";
    }>): this;
    addColumns<T>(items: T[], mapper: (item: T) => Omit<TableColumn, "flex" | "alignment"> & {
        flex?: number;
        alignment?: "left" | "center" | "right";
    }): this;
    /**
     * Dynamically update props for any existing column by `key`.
     */
    setColumnProps(columnKey: string, props: Partial<TableColumn>): this;
    setColumnAlignment(columnKey: string, alignment: "left" | "center" | "right"): this;
    rows(rows: Array<Record<string, unknown>>): this;
    useStripedRows(striped?: boolean): this;
    highlightRowsOnHover(highlight?: boolean): this;
    showBorders(enable?: boolean): this;
    setHorizontalBorders(enable?: boolean): this;
    setVerticalBorders(enable?: boolean): this;
    setBorderStyle(style: "solid" | "dashed" | "dotted" | "none"): this;
    setBorderColor(color: string): this;
    setBorderWidth(width: string): this;
    setTableLayout(layout: "auto" | "fixed"): this;
    setMaxHeight(value: string): this;
    setMaxWidth(value: string): this;
    setHeaderStyle(style: "default" | "bold" | "subtle" | "emphasized"): this;
    setHeaderSize(size: "small" | "medium" | "large"): this;
    setHeaderDivider(show?: boolean): this;
    setHeaderFixed(fixed?: boolean): this;
    setHeaderEmphasis(emphasis: "none" | "low" | "medium" | "high"): this;
    setHeaderPadding(padding: string): this;
    setHeaderPaddingTop(padding: string): this;
    setHeaderPaddingRight(padding: string): this;
    setHeaderPaddingBottom(padding: string): this;
    setHeaderPaddingLeft(padding: string): this;
    setSortable(sortable?: boolean): this;
    setDefaultSort(column: string, direction: "asc" | "desc"): this;
    setFilterable(filterable?: boolean): this;
    setSearchable(searchable?: boolean, placeholder?: string): this;
    setPagination(enable?: boolean, pageSize?: number): this;
    setPageSizeOptions(options: number[]): this;
    setSelectable(selectable?: boolean, multiSelect?: boolean): this;
    setStickyHeader(sticky?: boolean): this;
    setStickyFirstColumn(sticky?: boolean): this;
    setHorizontalScroll(scroll?: boolean): this;
    setActionsDisplay(display: "column" | "hover"): this;
    addRowAction(params: {
        hint: string;
        tool?: string;
        type?: TableAction["type"];
        prompt?: string;
        variant?: "default" | "destructive" | "outline";
        href?: string;
        icon?: string;
    }): this;
    /**
     * Define an action to be triggered when a row is clicked.
     * The front-end should pass the clicked row's data (and possibly index) to the tool call.
     */
    onRowClick(action: Partial<DslAction>): this;
}
