"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardUIBuilder = void 0;
const base_builder_1 = require("../../../base/base.builder");
class CardUIBuilder extends base_builder_1.DSLBuilder {
    constructor(initialProps, renderMode = "inline") {
        super("card", initialProps, renderMode);
    }
    title(title) {
        return this.setProp("title", title);
    }
    content(content) {
        return this.setProp("content", content);
    }
    alignActions(direction) {
        return this.setProp("actionAlignment", direction);
    }
    // Keeps retro compatibility with old library versions
    onConfirm(action) {
        const { tool, paramSchema, params } = action;
        if (!tool || !paramSchema || !params) {
            throw new Error("onConfirm action must have a tool, paramSchema, and params");
        }
        return this.addAction({
            type: "callTool",
            tool,
            paramSchema,
            params,
            key: 'button',
            config: {
                label: 'Confirm',
                type: "button",
                variant: "primary",
            }
        });
    }
    addButton(params) {
        const { label, tool, paramSchema, params: actionParams, variant = "primary" } = params;
        return this.addAction({
            key: 'button',
            type: "callTool",
            tool,
            paramSchema,
            params: actionParams,
            config: {
                label,
                type: "button",
                variant,
            }
        });
    }
    addButtons(buttonsOrItems, mapper) {
        if (mapper) {
            buttonsOrItems.forEach((item) => {
                const buttonParams = mapper(item);
                this.addButton(buttonParams);
            });
        }
        else {
            buttonsOrItems.forEach((buttonParams) => {
                this.addButton(buttonParams);
            });
        }
        return this;
    }
    addField(field) {
        this.element.props.fields = this.element.props.fields || [];
        this.element.props.fields.push(field);
        return this;
    }
    addFields(fieldsOrItems, mapper) {
        if (mapper) {
            fieldsOrItems.forEach((item) => {
                const field = mapper(item);
                this.addField(field);
            });
        }
        else {
            fieldsOrItems.forEach((field) => {
                this.addField(field);
            });
        }
        return this;
    }
}
exports.CardUIBuilder = CardUIBuilder;
//# sourceMappingURL=card.builder.js.map