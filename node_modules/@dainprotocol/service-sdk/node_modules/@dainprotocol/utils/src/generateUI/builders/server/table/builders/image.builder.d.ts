import { DSLBuilder, paramSchema } from "../../../..";
export type ObjectFitType = "fill" | "contain" | "cover" | "none" | "scale-down";
export interface ImageProps {
    src: string;
    alt?: string;
    width?: string | number;
    height?: string | number;
    aspectRatio?: number;
    boxShadow?: string;
    objectFit?: ObjectFitType;
    borderRadius?: string;
    borderWidth?: string;
    borderStyle?: string;
    borderColor?: string;
    /**
     * Applies filters like brightness, contrast, blur, etc.
     * e.g. "brightness(90%) contrast(110%)"
     */
    filter?: string;
}
export declare class ImageUIBuilder extends DSLBuilder<ImageProps> {
    constructor(initialProps?: Partial<ImageProps>, renderMode?: "inline" | "page");
    /**
     * Set the image source (URL or base64).
     */
    setSrc(src: string): this;
    /**
     * Set alt text for accessibility.
     */
    setAlt(alt: string): this;
    /**
     * Set width (e.g., "100px", 200, "50%", "auto").
     */
    setWidth(width: string | number): this;
    /**
     * Set height (similarly to width).
     */
    setHeight(height: string | number): this;
    /**
     * The aspect ratio (width / height) to maintain.
     * e.g. 1.777... for 16:9
     */
    setAspectRatio(ratio: number): this;
    /**
     * Sets how the image should fit within its bounding box.
     * e.g. "cover", "contain", "fill"...
     */
    setObjectFit(fit: ObjectFitType): this;
    /**
     * Applies a border radius, e.g. "8px", "50%", etc.
     */
    setBorderRadius(radius: string): this;
    /**
     * Define the border style.
     * E.g. "solid", "dashed", "none", etc.
     */
    setBorderStyle(style: string): this;
    /**
     * Border color, e.g. "#ccc".
     */
    setBorderColor(color: string): this;
    /**
     * Border width, e.g. "2px".
     */
    setBorderWidth(width: string): this;
    /**
     * Apply a box shadow (drop shadow) around the image container.
     * E.g. "0 2px 4px rgba(0,0,0,0.1)"
     */
    setBoxShadow(shadow: string): this;
    /**
     * Apply CSS filters like brightness, contrast, saturate, etc.
     * e.g. "brightness(90%) contrast(110%) blur(2px)"
     */
    setFilter(filter: string): this;
    /**
     * If you want the image to be clickable and trigger a DSL action
     * or open a link, you can store a key here that the front-end
     * can map to an action or handle in onClick.
     */
    onClick({ tool, params, paramSchema }: {
        tool: string;
        params?: Record<string, unknown>;
        paramSchema?: paramSchema;
    }): this;
}
