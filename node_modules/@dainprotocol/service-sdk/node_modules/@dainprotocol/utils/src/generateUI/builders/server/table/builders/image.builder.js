"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageUIBuilder = void 0;
const __1 = require("../../../..");
class ImageUIBuilder extends __1.DSLBuilder {
    constructor(initialProps, renderMode = "inline") {
        super("image", Object.assign({}, initialProps), renderMode);
    }
    /**
     * Set the image source (URL or base64).
     */
    setSrc(src) {
        return this.setProp("src", src);
    }
    /**
     * Set alt text for accessibility.
     */
    setAlt(alt) {
        return this.setProp("alt", alt);
    }
    /**
     * Set width (e.g., "100px", 200, "50%", "auto").
     */
    setWidth(width) {
        return this.setProp("width", width);
    }
    /**
     * Set height (similarly to width).
     */
    setHeight(height) {
        return this.setProp("height", height);
    }
    /**
     * The aspect ratio (width / height) to maintain.
     * e.g. 1.777... for 16:9
     */
    setAspectRatio(ratio) {
        return this.setProp("aspectRatio", ratio);
    }
    /**
     * Sets how the image should fit within its bounding box.
     * e.g. "cover", "contain", "fill"...
     */
    setObjectFit(fit) {
        return this.setProp("objectFit", fit);
    }
    /**
     * Applies a border radius, e.g. "8px", "50%", etc.
     */
    setBorderRadius(radius) {
        return this.setProp("borderRadius", radius);
    }
    /**
     * Define the border style.
     * E.g. "solid", "dashed", "none", etc.
     */
    setBorderStyle(style) {
        return this.setProp("borderStyle", style);
    }
    /**
     * Border color, e.g. "#ccc".
     */
    setBorderColor(color) {
        return this.setProp("borderColor", color);
    }
    /**
     * Border width, e.g. "2px".
     */
    setBorderWidth(width) {
        return this.setProp("borderWidth", width);
    }
    /**
     * Apply a box shadow (drop shadow) around the image container.
     * E.g. "0 2px 4px rgba(0,0,0,0.1)"
     */
    setBoxShadow(shadow) {
        return this.setProp("boxShadow", shadow);
    }
    /**
     * Apply CSS filters like brightness, contrast, saturate, etc.
     * e.g. "brightness(90%) contrast(110%) blur(2px)"
     */
    setFilter(filter) {
        return this.setProp("filter", filter);
    }
    /**
     * If you want the image to be clickable and trigger a DSL action
     * or open a link, you can store a key here that the front-end
     * can map to an action or handle in onClick.
     */
    onClick({ tool, params, paramSchema }) {
        return this.addAction({
            key: "image-click",
            type: "callTool",
            tool,
            params,
            paramSchema,
            shouldCallLLMAfterTool: false
        });
    }
}
exports.ImageUIBuilder = ImageUIBuilder;
//# sourceMappingURL=image.builder.js.map