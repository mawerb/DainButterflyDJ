import { BaseUIElement, DSLBuilder } from "../../../..";
type TextWithIconVariant = "primary" | "secondary" | "tertiary" | "destructive" | "success" | "warning" | "info" | "default";
export interface TextWithIconProps {
    text: string;
    icon?: string | DSLBuilder<any> | BaseUIElement<any>;
    tooltip?: string;
    iconPosition?: "left" | "right" | "top" | "bottom";
    variant?: TextWithIconVariant;
}
export declare class TextWithIconUIBuilder extends DSLBuilder<TextWithIconProps> {
    constructor(initialProps?: Partial<TextWithIconProps>, renderMode?: "inline" | "page");
    text(text: string): this;
    icon(icon: string | DSLBuilder | BaseUIElement): this;
    tooltip(tooltip: string): this;
    iconPosition(position: "left" | "right" | "top" | "bottom"): this;
    variant(variant: TextWithIconVariant): this;
}
export {};
