import { DslActionWithConfig, DSLBuilder } from "../../../..";
type ActionListActionConfig = {
    hint: string;
    variant?: "default" | "destructive" | "outline";
    href?: string;
    icon?: string;
};
export type ActionListAction = DslActionWithConfig<ActionListActionConfig>;
export interface ActionListProps {
    /**
     * The orientation: "horizontal" or "vertical".
     * Front-end can arrange the actions in a row or column.
     */
    orientation?: "horizontal" | "vertical";
    /**
     * The list of actions (icon or text buttons) to display.
     * Each entry is a DSL action that can call a tool, open a link, etc.
     */
    actions?: ActionListAction[];
    /**
     * An optional heading or label for the entire action list, if desired.
     */
    label?: string;
    /**
     * Additional notes or help text, possibly shown below or above the actions.
     */
    helperText?: string;
}
type ActionListButtonParams = ActionListActionConfig & {
    tool: string;
};
export declare class ActionListUIBuilder extends DSLBuilder<ActionListProps> {
    constructor(initialProps?: Partial<ActionListProps>, renderMode?: "inline" | "page");
    orientation(orientation: "horizontal" | "vertical"): this;
    label(label: string): this;
    helperText(text: string): this;
    /**
     * Adds a single action to the list.
     */
    addButton(params: {
        hint: string;
        tool: string;
        variant?: "default" | "destructive" | "outline";
        href?: string;
        icon?: string;
    }): this;
    /**
     * Adds multiple actions at once.
     */
    addButtons(buttons: Array<ActionListButtonParams>): this;
    addButtons<T>(items: T[], mapper: (item: T) => ActionListButtonParams): this;
}
export {};
