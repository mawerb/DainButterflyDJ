import { z, ZodError } from "zod";
export type ToolContext = {
    app: any;
    extraData?: any;
};
export type PricingInfo = {
    pricePerUse: number;
    currency: string;
};
export type AgentInfo = {
    agentId: string;
    address: string;
    smartAccountPDA?: string;
    id: string;
    webhookUrl?: string;
};
export type PaymentMethod = "crypto" | "stripe";
export interface BasePaymentIntent {
    amount: number;
    description: string;
    paymentMethod: PaymentMethod;
}
export interface CryptoPaymentIntent extends BasePaymentIntent {
    paymentMethod: "crypto";
    paymentIntentAddress: string;
}
export interface StripePaymentIntent extends BasePaymentIntent {
    paymentMethod: "stripe";
    publishableKey: string;
    clientSecret: string;
    intentId: string;
}
export type PaymentIntent = CryptoPaymentIntent | StripePaymentIntent;
export type ToolConfig<TInput extends z.ZodType = any, TOutput extends z.ZodType = any> = {
    id: string;
    name: string;
    description: string;
    input: TInput;
    output: TOutput;
    pricing?: PricingInfo;
    suggestConfirmation?: boolean;
    suggestConfirmationUI?: (input: z.input<TInput>) => Promise<{
        success?: boolean;
        ui?: any;
    }>;
    handler: (input: z.input<TInput>, agentInfo: AgentInfo, context: ToolContext) => Promise<{
        text: string;
        data: z.output<TOutput>;
        ui: any | undefined;
        pleasePay?: PaymentIntent | undefined;
        processes?: string[] | {
            id: string;
            name: string;
            description: string;
            type: "one-time" | "recurring";
        }[];
    }>;
    handleInputError?: (error: ZodError, agentInfo: AgentInfo, extraData?: any) => Promise<{
        text: string;
        data: z.output<TOutput>;
        ui: any | undefined;
        recommendedNextTool?: string;
        pleasePay?: PaymentIntent | undefined;
        processes?: string[] | {
            id: string;
            name: string;
            description: string;
            type: "one-time" | "recurring";
        }[];
    }>;
};
